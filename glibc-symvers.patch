--- a/include/iprt/linux/symvers.h
+++ b/include/iprt/linux/symvers.h
@@ -39,12 +39,14 @@
 /* Use versions of glibc symbols which are available in 32-bit EL3 or
  * 64-bit EL4.  Currently only those symbols needed by the Additions,
  * though this could probably be extended to work for host builds too. */
+#if defined(__GLIBC__)
 #if defined(RT_ARCH_AMD64)
 __asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
 __asm__(".symver posix_spawn,posix_spawn@GLIBC_2.2.5");
 #else  /* RT_ARCH_X86 */
 __asm__(".symver posix_spawn,posix_spawn@GLIBC_2.2");
 #endif
+#endif
 
 /* Do not use *_chk functions */
 #undef _FORTIFY_SOURCE
@@ -67,10 +69,12 @@
 #ifdef fnctl
 # undef fcntl
 #endif
+#if defined(__GLIBC__)
 #if defined(RT_ARCH_AMD64)
 __asm__(".symver fcntl64,fcntl@GLIBC_2.2.5");
 #else
 __asm__(".symver fcntl64,fcntl@GLIBC_2.0");
+#endif
 #endif
 
 /* Do not use ISO C99 scanf which has a glibc 2.7 dependency. */
--- a/src/VBox/Additions/x11/VBoxClient/chk_stubs.c
+++ b/src/VBox/Additions/x11/VBoxClient/chk_stubs.c
@@ -50,8 +50,9 @@
  * supc++ and gcc_eh contain references which we cannot change. */
 
 extern void *__wrap_memcpy(void *dest, const void *src, size_t n);
-
+#if defined(__GLIBC__)
 asm (".symver memcpy, memcpy@GLIBC_2.2.5");
+#endif
 void *__wrap_memcpy(void *dest, const void *src, size_t n)
 {
     return memcpy(dest, src, n);